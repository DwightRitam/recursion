class Solution {

private:
void solve(vector<vector<string>> &ans,vector<string>&board,int n, vector<int>&leftRow,vector<int>&upperDiagonal,vector<int>&lowerDiagonal,int col)
{
    if(col==n)
    {
        ans.push_back(board);
        return ;
    }

    //now check for every row,at first ,then in the recusion check
    //for every col

    for(int row=0;row<n;row++)
    {
        if(leftRow[row]==0 &&upperDiagonal[n-1+col-row]==0
        && lowerDiagonal[row+col]==0)
        {
            leftRow[row]=1;
            upperDiagonal[n-1+col-row]=1;
            lowerDiagonal[row+col]=1;
            board[row][col]='Q';
            

            solve(ans,board,n,leftRow,upperDiagonal,lowerDiagonal,col+1);

            leftRow[row]=0;
            upperDiagonal[n-1+col-row]=0;
            lowerDiagonal[row+col]=0;
            board[row][col]='.';

        }
    }


}
public:
    vector<vector<string>> solveNQueens(int n) {
        vector<vector<string>> ans;
        vector<string> board(n);
        string s(n,'.');
        for(int i=0;i<n;i++) board[i]=s;
        vector<int>leftRow(n,0),upperDiagonal(2*n-1,0),lowerDiagonal(2*n-1,0);

        solve(ans,board,n,leftRow,upperDiagonal,lowerDiagonal,0);
        return ans;
    }
};
