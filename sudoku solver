class Solution {
    private:
    bool isValid(int row,int col,vector<vector<char>>& board,char ch)
    {
        for(int i=0;i<9;i++)
        {
            //for row checking
            if(board[row][i]==ch) return false;
            //for col checking
            if(board[i][col]==ch) return false;

            /*now for 3*3 matrix
            3* (row/3) +i/3,row/3 gives the horizontal line of the 3*3 mat,then  
            suppose i=0,then it will givvvw us the starting
            row index of the 3*3 matrix,the size is 3,so it divided by 3,
            after every 3 ,it will move to the next row
            same for 3* (col/3) , col /3 gives the vertical col index
            i%3,suppose i=0,then it will give us the
            starting col index of the 3*3 matrix,
            matrix,the size is 3,so it modulated by 3,col will increase by 1
            after every 3 ,it will move to the firts col*/
            if(board[3* (row/3) +i/3][3* (col/3) + i%3]==ch) return false;
        }
        return true;
    }
    bool solve(vector<vector<char>>& board)
    {

        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]=='.')
                {
                    for(char ch='1';ch<='9';ch++)
                    {
                        if(isValid(i,j,board,ch))
                        {
                            board[i][j]=ch;
                            //if it's return true,don't bracktrack
                            //beacause we need the data at that place until
                            //furthure it gives false
                            if(solve(board)==true)
                            {
                                return true;
                            }
                            //means only backtrack when the function return false
                            else board[i][j]='.';
                        }
                    }
                    
                    return false;
                }
            }
        }
        //now this will only return if for all the cases the function returns
        // true,or we can say that all the empty places were filled by char;
        return true;
    }
public:
    void solveSudoku(vector<vector<char>>& board) {
        solve(board);
    }
};
